#!/usr/bin/env bash

#######################################################
# Arbiter config
ARBITER_DIR=$(pwd)/.arbiter

# Ensure all docker commands ran in this script connect via arbiter's socket
export DOCKER_HOST=unix://${ARBITER_DIR}/docker.sock

################################################################################
#
# Main entry point to arbiter
#
################################################################################
function main(){
		if [[ $# < 1 ]] ; then
				echo "Usage: arbiter cmd [options]"
				exit 1
		fi

		CMD=$1

		case $CMD in
				"ls"*)
						echo "Doing ls"
						;;
				"connect"*)
						cmd_connect $2 $3
						;;
				"disconnect"*)
						cmd_disconnect
						;;
				"docker"*)
						docker ${@:2}
						;;
				"pull"*)
						cmd_pull $2
						;;
				"clean"*)
						cmd_clean $2
						;;
				"deploy"*)
						cmd_deploy $2 $3
						;;
				"start"*)
						cmd_start $2
						;;
				"stop"*)
						cmd_stop $2
						;;
				"build"*)
						cmd_build $2
						;;
				"push"*)
						cmd_push $2
						;;
				*)
						log_fatal "Unknown command: ${CMD}"
						;;
		esac
}



################################################################################
#
# Command Functions
#
################################################################################

# Connects to a docker daemon potentially on a remote host by using
# ssh to forward a unix socket on the remote host to the local machine
#
# see: https://medium.com/@dperny/forwarding-the-docker-socket-over-ssh-e6567cfab160
function cmd_connect() {
		local HOST=$1
		local STACK_DATA_ROOT=$2

		if [[ -f ${ARBITER_DIR}/ssh.pid       ]] || \
			 [[ -e ${ARBITER_DIR}/docker.sock   ]] || \
			 [[ -f ${ARBITER_DIR}/swarmhost     ]] || \
			 [[ -f ${ARBITER_DIR}/stackdataroot ]]
		then
				log_fatal "Either a connection is already open, or a previous one was not terminatted with 'arbiter disconect' - run that first"
		fi

		if [[ -z ${HOST} ]] || [[ -z ${STACK_DATA_ROOT} ]] ; then
				log_fatal "Expected arguments <hostname> <stack_data_dir>"
				exit 1
		fi


		echo "Connecting to docker host: ${HOST}"

		mkdir -p ${ARBITER_DIR}

		echo ${HOST}            > ${ARBITER_DIR}/swarmhost
		echo ${STACK_DATA_ROOT} > ${ARBITER_DIR}/stackdataroot

		if [[ ${HOST} =~ "^(.+@)?(localhost|127.0.0.1|$(hostname))$" ]] ; then
				ln -sf /var/run/docker.sock ${ARBITER_DIR}/docker.sock
		else
				ssh -nNT -L ${ARBITER_DIR}/docker.sock:/var/run/docker.sock $1 &
				local SSH_PID=$!
				echo "Started ssh process: ${SSH_PID}"
				echo ${SSH_PID} > ${ARBITER_DIR}/ssh.pid
		fi
}

# Cleans up a connection previously opened by connect()
# Note that this can cleanup if the connection was incorrectly
# terminated (eg, machine was shutdown, and ARBITER_DIR is in
# inconsitent state, with files that point to a connection that
# was broken upon shutdown)
function cmd_disconnect() {
		if [[ -f ${ARBITER_DIR}/ssh.pid ]] ; then
				SSH_PID=$(cat $(pwd)/.arbiter/ssh.pid)

				echo "Killing SSH process: ${SSH_PID}"
				kill ${SSH_PID} > /dev/null 2>&1
		fi

		rm -f ${ARBITER_DIR}/docker.sock ${ARBITER_DIR}/swarmhost ${ARBITER_DIR}/ssh.pid ${ARBITER_DIR}/stackdataroot
}

# Deletes data cached by arbiter for a stack
function cmd_clean() {
		local stack=$1

		if [[ -z $stack ]] ; then
				log_fatal "Expected <stack_name> argument"
		fi

		rm -rf ${ARBITER_DIR}/stacks/${stack}
}

# Pulls the git repo for some stack and checks out the version requiredd
# for deployment
function cmd_pull(){
		local stack=$1

		if [[ -z $stack ]] ; then
				log_fatal "Expected <stack_name> argument"
		fi

		if [[ ! -f $(pwd)/${stack}/REPOSITORY ]] ; then
				log_fatal "Stack '${stack}' is missing REPOSITORY file"
		fi
	  local repo=$(cat $(pwd)/${stack}/REPOSITORY)

		if [[ ! -f $(pwd)/${stack}/VERSION ]] ; then
				log_fatal "Stack '${stack}' is missing VERSION file"
		fi
		local version=$(cat $(pwd)/${stack}/VERSION)

		mkdir -p ${ARBITER_DIR}/stacks

		if [[ ! -d ${ARBITER_DIR}/stacks/${stack} ]] ; then
				git clone ${repo} ${ARBITER_DIR}/stacks/${stack}
		else
				CUR_REMOTE=$(cd ${ARBITER_DIR}/stacks/${stack} && git remote -v | grep origin | head -n 1 | awk '{ print $2 }')

				# Check that the remote is correct, readlink condition
				# is incase we are cloning a local git repo, and git has changed
				# the path to an absolute one
				if [[ ${CUR_REMOTE} != $repo ]] && \
					 [[ ! $(readlink ${repo}) == $(readlink ${CUR_REMOTE}) ]]
				then

						log_fatal "Checkout for ${stack} already exists with remote ${CUR_REMOTE}, but ${repo} was requested - try 'arbiter clean ${stack}'"

				fi

				(cd ${ARBITER_DIR}/stacks/${stack} && git fetch)
		fi

		if [[ $? != 0 ]] ; then
				log_fatal "Failed to update ${repo}"
		fi

		(cd ${ARBITER_DIR}/stacks/${stack} && git checkout ${version})

		if [[ $? != 0 ]] ; then
				log_fatal "Failed to checkout ${version}"
		fi

		(cd ${ARBITER_DIR}/stacks/${stack} && git status | grep 'On branch' > /dev/null)

		if [[ $? == 0 ]] ; then
				(cd ${ARBITER_DIR}/stacks/${stack} && git pull)

				if [[ $? != 0 ]] ; then
						log_fatal "Failed to pull changes for branch"
				fi
		fi
}

# Uses treeploy to deploy the appdata directory for a stack using all parameter
# files in the stack descriptor directory, as well as parameters.yaml in the
# directory from which arbiter is ran
function cmd_deploy() {
		local stack=$1

		if [[ -z $stack ]] ; then
				log_fatal "Expected <stack> arguments"
		fi

		if [[ ! -f ${ARBITER_DIR}/stackdataroot ]] ; then
				log_fatal "Stack data root not specified - try disconnecting and reconnecting"
		fi

		local target_path=$(cat ${ARBITER_DIR}/stackdataroot)/${stack}
		local repo=$(cat $(pwd)/$stack/REPOSITORY)
		local version=$(cat $(pwd)/$stack/VERSION)

		if [[ ! -d ${ARBITER_DIR}/stacks/$stack ]] ; then
				cmd_pull $stack
		fi

		local swarmhost=$(cat ${ARBITER_DIR}/swarmhost)

		local cmd="treeploy ${ARBITER_DIR}/stacks/${stack}/appdata ${swarmhost}:${target_path} -vv --force"

		cmd=${cmd}$(gen_treeploy_model_args_string ${stack})

		eval $cmd
}

function cmd_start() {
		local STACK=$1

		if [[ -z ${STACK} ]] ; then
				log_fatal "Exepcted <stack> argument"
		fi

		local STACK_DIR=${ARBITER_DIR}/stacks/${STACK}

		if [[ ! -d ${STACK_DIR} ]] ; then
				log_fatal "Stack is not checked out - try 'arbiter ${stack} pull' first (you probably also want to 'arbiter ${stack} deploy' if you haven't yet) "
		fi

		local COMPOSE_FILE=${STACK_DIR}/docker-compose.yaml

		if [[ ! -f ${COMPOSE_FILE} ]] ; then

				if [[ -f ${STACK_DIR}/docker-compose.yaml.dot ]] ; then
						# Then we need to process the compose file

						mkdir -p ${ARBITER_DIR}/compose

						COMPOSE_FILE=${ARBITER_DIR}/compose/${STACK}.yaml

						local cmd="treeploy ${STACK_DIR}/docker-compose.yaml.dot ${COMPOSE_FILE} --overwrite "
						cmd=${cmd}$(gen_treeploy_model_args_string $1)

						echo "Generating docker-compose file..."
						eval ${cmd}

						if [[ $? != 0 ]] ; then
								log_fatal "Failed to generate docker-compose file from dot template"
						fi

				else
						log_fatal "Failed to find file docker-compose.yaml or docker-compose.yaml.dot in stack repository"
				fi
		fi

		echo "Updating stack deployment on docker host..."
	  docker stack deploy --compose-file=${COMPOSE_FILE} --with-registry-auth ${STACK}
}

function cmd_stop() {
		local STACK=$1

		if [[ -z ${STACK} ]] ; then
				log_fatal "Expected <stack> argument"
		fi

		docker stack rm ${STACK}
}

function cmd_build() {
		local STACK=$1

		# Ensure we use the local docker host rather than remote...
		local OLD_DOCKER_HOST=${DOCKER_HOST}
		export DOCKER_HOST=''

		if [[ -z ${STACK} ]] ; then
				log_fatal "Expected <stack> argument"
		fi

		if [[ -f ${ARBITER_DIR}/stacks/${STACK}/containers/dobi.yaml ]] ; then
				echo "Building containers with dobi"

				pushd ${ARBITER_DIR}/stacks/${STACK}/containers/ > /dev/null
				dobi build
				popd > /dev/null
		fi

		if [[ -f ${ARBITER_DIR}/stacks/${STACK}/Makefile ]] ; then
				echo "Running root makefile"

				pushd ${ARBITER_DIR}/stacks/${STACK} > /dev/null
				make
				popd > /dev/null
		fi

		# Restore old docker host
		export DOCKER_HOST=${OLD_DOCKER_HOST}
}

function cmd_push() {
		local STACK=$1

		# Ensure we use the local docker host rather than remote...
		local OLD_DOCKER_HOST=${DOCKER_HOST}
		export DOCKER_HOST=''

		if [[ -z ${STACK} ]] ; then
				log_fatal "Expected <stack> argument"
		fi

		if [[ -f ${ARBITER_DIR}/stacks/${STACK}/containers/dobi.yaml ]] ; then
				echo "Pushing containers with dobi"

				pushd ${ARBITER_DIR}/stacks/${STACK}/containers/ > /dev/null
				dobi push
				popd > /dev/null
		fi

		# Restore old docker host
		export DOCKER_HOST=${OLD_DOCKER_HOST}
}


################################################################################
#
# Helper functions below
#
################################################################################

function get_stack_data_root () {
		local stack=$1

		if [[ ! -f ${ARBITER_DIR}/stackdataroot ]] ; then
				log_fatal "Stack data root not specified - try disconnecting and reconnecting"
		fi

		echo $(cat ${ARBITER_DIR}/stackdataroot)/${stack}
}

# Generates the CLI arguments to treeploy to load all the model files relevant
# to some stack
function gen_treeploy_model_args_string () {
		local stack=$1
		local cmd=""

		if [[ -f ./parameters.yaml ]] ; then
				cmd="$cmd --modelfile ./parameters.yaml --targetdriver use_sudo true"
		fi

		# Load defaults from the stack repo
		if [[ -d ${ARBITER_DIR}/stacks/${stack}/parameters ]] ; then
				for file in $(ls ${ARBITER_DIR}/stacks/${stack}/parameters | grep '.yaml$\|.yml$\|.json$') ; do
						cmd="$cmd --modelfile ${ARBITER_DIR}/stacks/${stack}/parameters/${file}"
				done
		fi

		# Load overrides specific to this swarm
		for file in $(ls ${stack} | grep '.yaml$\|.yml$\|.json$') ; do
				cmd="$cmd --modelfile ${stack}/${file}"
		done

		# Set stack data
		cmd="${cmd} --model stack.name ${stack}"
		cmd="${cmd} --model stack.data_dir $(get_stack_data_root ${stack})"

		# Idea is to call this function inside $(...), hence stdout will be captured
		# as a return - see https://stackoverflow.com/a/3236940/1313573
	  echo "${cmd}"
}

function log_fatal(){
		tput setaf 1
		>&2 printf "FATAL | "
		tput sgr0
		>&2 echo $1

		exit 1
}

function log_info(){
		tput setaf 6
		printf "INFO  | "
		tput sgr0
		echo $1
}

# We'd better actually run main...
# Right down at the bottom so that everything is in scope by the time we execute
main $@
